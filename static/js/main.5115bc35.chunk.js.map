{"version":3,"sources":["assets/terrorist.png","TargetModel.js","Blanktarget.js","TargetList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TargetModel","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","inherits","createClass","key","value","console","log","refreshTable","react_default","a","createElement","alt","src","img","width","height","onClick","className","Component","Blanktarget","apply","arguments","TargetList","state","r_c","newTable","makeTable","_this2","trvar","fl","j","row","tdvar","i","col","somerandom","Math","floor","random","push","src_TargetModel_0","forHide","src_Blanktarget_0","setState","defaultProps","App","src_TargetList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5115bc35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/terrorist.f2fe9ce0.png\";","import React, { Component } from \"react\";\r\nimport img from \"./assets/terrorist.png\";\r\n\r\nimport \"./TargetModel.css\";\r\n\r\nexport class TargetModel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  handleClick() {\r\n    console.log(\"asdasd\");\r\n    this.props.refreshTable();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <img\r\n          alt=\"asd\"\r\n          src={img}\r\n          width=\"30px\"\r\n          height=\"80px\"\r\n          onClick={this.handleClick}\r\n          className=\"vi in\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TargetModel;\r\n","import React, { Component } from \"react\";\r\nimport \"./Blanktarget.css\";\r\n\r\nexport class Blanktarget extends Component {\r\n  render() {\r\n    return <div className=\"blanktarget\" />;\r\n  }\r\n}\r\n\r\nexport default Blanktarget;\r\n","import React, { Component } from \"react\";\r\nimport TargetModel from \"./TargetModel\";\r\nimport \"./TargetList.css\";\r\nimport Blanktarget from \"./Blanktarget\";\r\n\r\nclass TargetList extends Component {\r\n  static defaultProps = {\r\n    row: 6,\r\n    col: 26\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      r_c: [0, 2],\r\n      newTable: this.makeTable()\r\n    };\r\n\r\n    this.refreshTable = this.refreshTable.bind(this);\r\n    this.makeTable = this.makeTable.bind(this);\r\n  }\r\n\r\n  refreshTable() {\r\n    console.log(\"works\");\r\n    this.makeTable();\r\n  }\r\n\r\n  makeTable() {\r\n    var trvar = [];\r\n    var fl = false;\r\n    for (let j = 0; j < this.props.row; j++) {\r\n      var tdvar = [];\r\n      for (let i = 0; i < this.props.col; i++) {\r\n        let somerandom = Math.floor(Math.random() * 26) + 1;\r\n\r\n        if (fl === false && somerandom === 8) {\r\n          fl = true;\r\n          tdvar.push(\r\n            <td>\r\n              <TargetModel\r\n                key=\"j-i\"\r\n                forHide={true}\r\n                refreshTable={() => this.refreshTable()}\r\n              />\r\n            </td>\r\n          );\r\n        } else {\r\n          tdvar.push(\r\n            <td>\r\n              <Blanktarget key=\"j=i\" />\r\n            </td>\r\n          );\r\n        }\r\n      }\r\n\r\n      trvar.push(<tr>{tdvar}</tr>);\r\n    }\r\n\r\n    this.setState({ newTable: trvar });\r\n\r\n    return trvar;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <table>\r\n              <tbody>{this.state.newTable}</tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TargetList;\r\n","import React, { Component } from \"react\";\nimport TargetList from \"./TargetList\";\n\nclass App extends Component {\n  render() {\n    return <TargetList />;\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}