//https://drive.google.com/file/d/16x1ovZcp796yof1rIf0dqLe0cQ83YCfD/view?usp=sharing

function *aa(){

  console.log("do something beffore the next yield")
  yield 1;

  console.log("asdasd")
  yield 2;
}

var a = aa();

console.log(a.next().value);

console.log(a.next().value);


let bb = function(x){
  return function(y){
        return function *jj(){

      console.log("inside of curry" );
      yield x+y;
      console.log("deeper into the cury");
      yield "curry2";
    }

  }
}

let ji = bb(7);
let uu = ji(5);
let hh = uu();

let opop = hh.next();
let popo = hh.next();
let soso = hh.next();


console.log(popo)


// this is currying
function func1() {console.log ('Hey Medium.')};
function firstClassfunc1 (argsFunc) // function as an argument 
{return argsFunc()}; //function as a return value
function firstClassfunc2  ()  {return func1};
firstClassfunc1 (firstClassfunc2());

//currying works like this too lul
function aa(x,d,i){
  return function(y,f){
    return{d:x+d+i+y+f,
    k:"asdasd"} ;
  }
}

console.log(aa(2,1,1)(3,5).k) // output is "asdasd" ofcourse


//factory function (similar to a classs(you can associate/stick/link variables to objects))
function aa(){

const ss = "asdasd";

return{
  hh: function(){
   console.log(ss);
  }
}
}

let dd = aa();

dd.hh();


//https://drive.google.com/file/d/16x1ovZcp796yof1rIf0dqLe0cQ83YCfD/view?usp=sharing
